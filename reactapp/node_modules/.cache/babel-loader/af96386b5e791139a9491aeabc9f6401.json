{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eh5i0\\\\Desktop\\\\ReactProject\\\\reactapp\\\\src\\\\Pages\\\\Users.js\",\n    _s = $RefreshSig$();\n\nimport '../Pages/style.css';\nimport { React, useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sortTable() {\n  var table, rows, switching, i, x, y, shouldSwitch;\n  var table = document.getElementById(\"myTable\");\n  var switching = true;\n\n  while (switching) {\n    //start by saying: no switching is done:\n    switching = false;\n    var rows = table.rows;\n    /*Loop through all table rows (except the\r\n    first, which contains table headers):*/\n\n    for (i = 1; i < rows.length - 1; i++) {\n      //start by saying there should be no switching:\n      shouldSwitch = false;\n      /*Get the two elements you want to compare,\r\n      one from current row and one from the next:*/\n\n      x = rows[i].getElementsByTagName(\"TD\")[0];\n      y = rows[i + 1].getElementsByTagName(\"TD\")[0]; //check if the two rows should switch place:\n\n      if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n        //if so, mark as a switch and break the loop:\n        shouldSwitch = true;\n        break;\n      }\n    }\n\n    if (shouldSwitch) {\n      /*If a switch has been marked, make the switch\r\n      and mark that a switch has been done:*/\n      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n      switching = true;\n    }\n  }\n}\n\nfunction Users() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    Axios.get('https://jsonplaceholder.typicode.com/users').then(res => {\n      setUsers(res.data);\n    }).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"center\",\n      children: \" All Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onclick: sortTable(),\n      children: \"Sort\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      id: \"myTable\",\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Website\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), users.map((user, index) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", user.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", user.email]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\" \", user.website]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 26\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 31\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Users, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/eh5i0/Desktop/ReactProject/reactapp/src/Pages/Users.js"],"names":["React","useEffect","useState","Axios","sortTable","table","rows","switching","i","x","y","shouldSwitch","document","getElementById","length","getElementsByTagName","innerHTML","toLowerCase","parentNode","insertBefore","Users","users","setUsers","get","then","res","data","catch","err","console","log","map","user","index","name","email","website"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAGA,SAASC,SAAT,GAAqB;AACjB,MAAIC,KAAJ,EAAWC,IAAX,EAAiBC,SAAjB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,YAArC;AACA,MAAIN,KAAK,GAAGO,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAZ;AACC,MAAIN,SAAS,GAAG,IAAhB;;AAED,SAAOA,SAAP,EAAkB;AAChB;AACAA,IAAAA,SAAS,GAAG,KAAZ;AACD,QAAID,IAAI,GAAGD,KAAK,CAACC,IAAjB;AACC;AACN;;AACM,SAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAIF,IAAI,CAACQ,MAAL,GAAc,CAA/B,EAAmCN,CAAC,EAApC,EAAwC;AACtC;AACAG,MAAAA,YAAY,GAAG,KAAf;AACA;AACR;;AACQF,MAAAA,CAAC,GAAGH,IAAI,CAACE,CAAD,CAAJ,CAAQO,oBAAR,CAA6B,IAA7B,EAAmC,CAAnC,CAAJ;AACAL,MAAAA,CAAC,GAAGJ,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,CAAYO,oBAAZ,CAAiC,IAAjC,EAAuC,CAAvC,CAAJ,CANsC,CAOtC;;AACA,UAAIN,CAAC,CAACO,SAAF,CAAYC,WAAZ,KAA4BP,CAAC,CAACM,SAAF,CAAYC,WAAZ,EAAhC,EAA2D;AACzD;AACAN,QAAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;;AACD,QAAIA,YAAJ,EAAkB;AAChB;AACR;AACQL,MAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQU,UAAR,CAAmBC,YAAnB,CAAgCb,IAAI,CAACE,CAAC,GAAG,CAAL,CAApC,EAA6CF,IAAI,CAACE,CAAD,CAAjD;AACAD,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF;AACF;;AAGH,SAASa,KAAT,GAAiB;AAAA;;AAIb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,EAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,KAAK,CAACoB,GAAN,CAAU,4CAAV,EACKC,IADL,CACUC,GAAG,IAAI;AAETH,MAAAA,QAAQ,CAACG,GAAG,CAACC,IAAL,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALlB;AAOH,GARQ,EAQN,EARM,CAAT;AAaA,sBACI;AAAA,4BACG;AAAI,MAAA,EAAE,EAAC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,eAEG;AAAQ,MAAA,OAAO,EAAExB,SAAS,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,eAGI;AAAO,MAAA,EAAE,EAAC,SAAV;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAOSiB,KAAK,CAACU,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,4BAAQ;AAAA,kCACL;AAAA,4BAAMD,IAAI,CAACE,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA,kBADK,eAEL;AAAA,4BAAMF,IAAI,CAACG,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFK,eAGL;AAAA,4BAAMH,IAAI,CAACI,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHK;AAAA,WAASH,KAAT;AAAA;AAAA;AAAA;AAAA,gBAAR;AAMK,OAPN,CAPT;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH;;GAnDQb,K;;KAAAA,K;AAqDT,eAAeA,KAAf","sourcesContent":["import '../Pages/style.css'\r\nimport { React, useEffect, useState } from 'react';\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction sortTable() {\r\n    var table, rows, switching, i, x, y, shouldSwitch;\r\n    var table = document.getElementById(\"myTable\");\r\n     var switching = true;\r\n   \r\n    while (switching) {\r\n      //start by saying: no switching is done:\r\n      switching = false;\r\n     var rows = table.rows;\r\n      /*Loop through all table rows (except the\r\n      first, which contains table headers):*/\r\n      for (i = 1; i < (rows.length - 1); i++) {\r\n        //start by saying there should be no switching:\r\n        shouldSwitch = false;\r\n        /*Get the two elements you want to compare,\r\n        one from current row and one from the next:*/\r\n        x = rows[i].getElementsByTagName(\"TD\")[0];\r\n        y = rows[i + 1].getElementsByTagName(\"TD\")[0];\r\n        //check if the two rows should switch place:\r\n        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n          //if so, mark as a switch and break the loop:\r\n          shouldSwitch = true;\r\n          break;\r\n        }\r\n      }\r\n      if (shouldSwitch) {\r\n        /*If a switch has been marked, make the switch\r\n        and mark that a switch has been done:*/\r\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n        switching = true;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\nfunction Users() {\r\n\r\n\r\n \r\n    const [users, setUsers] = useState([]);\r\n\r\n    useEffect(() => {\r\n        Axios.get('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => {\r\n              \r\n                setUsers(res.data)\r\n            })\r\n            .catch(err => console.log(err))\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n           <h1 id='center' > All Users</h1>\r\n           <button onclick={sortTable()}>Sort</button>\r\n            <table id=\"myTable\">\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Email</th>\r\n                    <th>Website</th>\r\n                </tr>\r\n               \r\n                    {users.map((user, index) => {                     \r\n                      return  <tr key={index}>\r\n                         <td> {user.name}</td> \r\n                         <td> {user.email}</td> \r\n                         <td> {user.website}</td> \r\n                         \r\n                         \r\n                    </tr> })}\r\n              \r\n                \r\n                   \r\n\r\n                \r\n\r\n            </table>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;"]},"metadata":{},"sourceType":"module"}